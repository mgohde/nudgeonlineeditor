#!/usr/bin/python

# login - Script to get login-related information for clients.
# Created by Michael Gohde around October 31, 2016.


import os
import sys
import hashlib
import MySQLdb

# A quick function to convert a python dictionary to 
# a json class. 
def gen_json(dat_dict):
    print "{"
    vals=list(dat_dict)
    for i in range(0, len(vals)):
        if i!=0:
            sys.stdout.write(',\n')
        sys.stdout.write('    "%s": "%s"' % (vals[i], str(dat_dict[vals[i]])))
    print ""
    print "}"


# Prints a line break. Probably no longer useful.
def br():
    print '<br>'


# Generates and prints out an HTTP header for server output.
def printheader():
    print("Content-Type: application/json;charset=utf-8")
    print('')


# Returns a valid database connection given a database username and password.
def dbconnect(username, pwd):
    return MySQLdb.connect("localhost", username, pwd, "qdata")


# Prints an HTTP header representing an error.
def generror(err):
    print(err)
    print('')


def endquery(dbquery):
    while len(dbquery.fetch_row())!=0:
        pass


# Returns a json object for the given user if the username and password
# are found in the database.
def genlogin(uname, pwd):
    pwdhash=hashlib.sha1(pwd).hexdigest()
    db=dbconnect('hashteam', 'passw0rd')
    db.query("SELECT * FROM userlookup WHERE username='%s' AND passhash='%s'" % (uname, pwdhash))
    vals=db.use_result()
    try:
        r=vals.fetch_row()[0]

        # Exhaust all other data in the query so MySQL doesn't 
        # have a fit:
        endquery(vals)

    except:
        generror("Status:400")
        return

    # This means that we found the user with correct password. 
    # Generate a session and return info to the caller:
    if len(r)!=0:
        db.query("INSERT INTO sessions (userid, username, logindate, ipaddr) VALUES (%s, '%s', NOW(), '%s')" % (str(r[0]), r[1], '1.2.3.4'))
        db.commit()
        s=str(r[0])
        db.query("SELECT sessionid FROM sessions WHERE userid='%s'" % s)
        vals=db.use_result()
        try:
            sessionid=vals.fetch_row()[0]
            sessionid=sessionid[0]
            endquery(vals)
            
        except:
            generror("Status:400")
            return
        printheader()

        gen_json({'username':r[1], 'id':r[0], 'sessionid': sessionid})
    else:
        generror("Status:400")
    db.close()


# Creates a new user and inserts useful info in the database.
def genuser(uname, pwd):
    pwdhash=hashlib.sha1(pwd).hexdigest()
    db=dbconnect('hashteam', 'passw0rd')
    # Get the next id in the sequence:
    db.query("SELECT id+1 FROM userlookup WHERE id=(SELECT MAX(id) FROM userlookup)")
    vals=db.use_result()
    newid=0
    try:
        newid=vals.fetch_row()[0]
        newid=newid[0]

        while len(vals.fetch_row())!=0:
            pass

    except:
        generror("Status:400")
        return
    printheader()
    db.query("INSERT INTO userlookup VALUES (%s, '%s', '%s')" % (str(newid), uname, pwdhash))
    db.commit()
    gen_json({'username':uname, 'userid':newid})
    db.close()


def delsession(reqid):
    db=dbconnect('hashteam', 'passw0rd')
    db.query("DELETE FROM sessions WHERE sessionid=%s" % str(reqid))
    db.commit()
    db.close()
    printheader()
    gen_json({'sessionid':reqid})


# Dispatcher code:
def main(reqmethod, rsrc):
    sys.stderr=sys.stdout
    # Start dispatching stuff:
    if rsrc is not None:
        reqchunks=rsrc.split('/')[1:]

        if len(reqchunks)==1 and reqmethod=="DELETE":
            delsession(reqchunks[0])
            
        elif len(reqchunks)==2:
            if reqmethod=="GET":
                genlogin(reqchunks[0], reqchunks[1])

            elif reqmethod=="PUT":
                genuser(reqchunks[0], reqchunks[1])
                
        else:
            generror("Status:400")
            return

    else:
        generror("Status:400")

rmethod="GET"
rsrc=None

try:
    rmethod=os.environ['REQUEST_METHOD']
    rsrc=os.environ['PATH_INFO']
except:
    pass

main(rmethod, rsrc)


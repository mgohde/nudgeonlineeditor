#!/usr/bin/python

# messages - Script to create, manage, and return individual queue items for a given user.
# Created by Michael Gohde on Nov 1, 2016.


import os
import sys
import hashlib
import MySQLdb
import urllib

dbuser='hashteam'
dbpass='passw0rd'

# A quick function to convert a python dictionary to 
# a json class. 
def gen_json(dat_dict):
    print "{"
    vals=list(dat_dict)
    for i in range(0, len(vals)):
        if i!=0:
            sys.stdout.write(',\n')
        sys.stdout.write('    "%s": "%s"' % (vals[i], str(dat_dict[vals[i]])))
    print ""
    print "}"


# Prints a line break. Probably no longer useful.
def br():
    print '<br>'


# Generates and prints out an HTTP header for server output.
def printheader():
    print("Content-Type: application/json;charset=utf-8")
    print('')


# Returns a valid database connection given a database username and password.
def dbconnect(username, pwd):
    return MySQLdb.connect("localhost", username, pwd, "qdata")


# Prints an HTTP header representing an error.
def generror():#err):
    print("Status:400")
    #print(err)
    print('')


def endquery(dbquery):
    try:
        while len(dbquery.fetch_row())!=0:
            pass
    except:
        pass


def get_user_id(db, sessionid):
    #sys.stderr.write("Looking up user for sessionid %s\n" % sessionid)
    db.query("SELECT userid FROM sessions WHERE sessionid=%s" % sessionid)
    vals=db.use_result()

    try:
        r=vals.fetch_row()[0]
        endquery(db)
        return r[0]
    except:
        return -1


def newmessage(sessionid, priority, content, cls, duedate, title):
    db=dbconnect(dbuser, dbpass)
    userid=get_user_id(db, sessionid)
    
    if userid<0:
        generror()
        return

    try:
        db.query("INSERT INTO usrentries (userid, description, class, duedate, priority, title) VALUES (%s, '%s', '%s', '%s', '%s', '%s')" % (str(userid), content, cls, duedate, priority, title))
        db.commit()
    except:
        generror()
        db.close()
        return

    # Determine what the message ID was:
    db.query("SELECT entryid FROM usrentries WHERE description='%s'" % content)
    vals=db.use_result()
    
    try:
        r=vals.fetch_row()[0]
        endquery(db)
        printheader()
        gen_json({'entryid':r[0]})
    except:
        generror()
        db.close()
        return

    db.close()


def modmessage(sessionid, messageid, priority, content, cls, duedate, title):
    db=dbconnect(dbuser, dbpass)
    userid=get_user_id(db, sessionid)
    
    # This is a safe delete; it requires that the user id be correct for the deleted message:
    try:
        db.query("DELETE FROM usrentries WHERE entryid=%s AND userid=%s" % (messageid, userid))
        db.commit()
    except:
        # Note: Come up with more descriptive errors than "invalid request"
        generror()
        db.close()
        return

    # If everything's alright, insert a new message with the given idea:
    db.query("INSERT INTO usrentries (userid, description, class, duedate, priority, title) VALUES (%s, '%s', '%s', '%s', '%s', '%s')" % (str(userid), content, cls, duedate, priority, title))
    db.commit()
    
    # Determine what the message ID was:
    db.query("SELECT entryid FROM usrentries WHERE description='%s'" % content)
    vals=db.use_result()
    
    try:
        r=vals.fetch_row()[0]
        endquery(db)
        printheader()
        gen_json({'entryid':r[0]})
    except:
        generror()
        db.close()
        return
    
    

def delmessage(messageid, sessionid):
    db=dbconnect(dbuser, dbpass)
    userid=get_user_id(db, sessionid)
    # This is a safe delete; it requires that the user id be correct for the deleted message:
    try:
        db.query("DELETE FROM usrentries WHERE entryid=%s AND userid=%s" % (messageid, userid))
        db.commit()
        db.close()
        printheader()
        gen_json({'entryid':messageid})
    except:
        # Note: Come up with more descriptive errors than "invalid request"
        generror()
        db.close()
        return


def list_messages(sessionid):
    err=sys.stderr
    err.write("Listing messages for session %s\n" % str(sessionid))
    db=dbconnect(dbuser, dbpass)
    userid=get_user_id(db, sessionid)
    err.write("userid: %s\n" % str(userid))
    resplist=[]
    try:
        db.query("SELECT entryid, title FROM usrentries WHERE userid=%s" % userid)
        vals=db.use_result()
        
        # Since there really isn't a good way of determining the size of this query without using a whole different query:
        while True:
            tmp=vals.fetch_row()
            err.write("Contents of tmp: %s\n" % str(tmp))
            
            if len(tmp)==0:
                break
            else:
                resplist.append(tmp)
        db.close()
        
        printheader()
        entrydict={}
        
        for r in resplist:
            # mysqldb returns data in a strange way. Some queries are structured as tuples of 
            # tuples where only the first chunk of the outer tuple is useful.
            r=r[0]
            entrydict[str(r[0])]=str(r[1])
        
        gen_json(entrydict)
    except:
        generror()
        db.close()
        return


def get_message(messageid, sessionid):
    db=dbconnect(dbuser, dbpass)
    userid=get_user_id(db, sessionid)
    
    if userid==-1:
        generror()
        db.close()
        return
        
    try:
        db.query("SELECT * FROM usrentries WHERE userid=%s AND entryid=%s" % (str(userid), messageid))
        vals=db.use_result()
        
        r=vals.fetch_row()
        endquery(vals)
        
        r=r[0]
        retdict={'entryid': r[0], 'userid': r[1], 'text': r[2], 'class': r[3], 'duedate': r[4], 'priority': r[5], 'title': r[6]}
        printheader()
        gen_json(retdict)
    except:
        generror()
        db.close()
        return


def new_message_wrapper(sessionid, querydata):
    querytoks=querydata.split(',')
    
    if len(querytoks)==5:
        newmessage(sessionid, querytoks[0], querytoks[1], querytoks[2], querytoks[3], querytoks[4])
    else:
        generror()


def mod_message_wrapper(sessionid, messageid, querydata):
    querytoks=querydata.split(',')
    
    if len(querytoks)==5:
        modmessage(sessionid, messageid, querytoks[0], querytoks[1], querytoks[2], querytoks[3], querytoks[4])
    else:
        generror()


def get_function_dispatcher(request_arr):
    if len(request_arr)==2:
        if request_arr[1].upper()=='LIST':
            list_messages(request_arr[0])
        else:
            get_message(request_arr[1], request_arr[0])
    else:
        generror()


# Dispatcher code:
def main(reqmethod, rsrc, query):
    #sys.stderr=sys.stdout
    # Start dispatching stuff:
    if rsrc is not None:
        reqchunks=rsrc.split('/')[1:]

        if reqmethod=="GET":
            get_function_dispatcher(reqchunks)
        elif reqmethod=="PUT" and len(reqchunks)==6:
            newmessage(reqchunks[0], reqchunks[1], reqchunks[2], reqchunks[3], reqchunks[4], reqchunks[5])
        elif reqmethod=="PUT" and len(reqchunks)==1 and query!=None:
            new_message_wrapper(reqchunks[0], query)
        elif reqmethod=="DELETE" and len(reqchunks)==2:
            delmessage(reqchunks[1], reqchunks[0])
        elif reqmethod=="PATCH" and len(reqchunks)==7:
            modmessage(reqchunks[0], reqchunks[1], reqchunks[2], reqchunks[3], reqchunks[4], reqchunks[5], reqchunks[6])
        elif reqmethod=="PATCH" and len(reqchunks)==3 and query!=None:
            mod_message_wrapper(reqchunks[0], reqchunks[1], query)
        else:
            generror()
    else:
        generror()


rmethod="GET"
rsrc=None
query=None

try:
    rmethod=os.environ['REQUEST_METHOD']
    rsrc=urllib.unquote(os.environ['PATH_INFO']).replace('+', ' ')
    query=urllib.unquote(os.environ['QUERY_STRING']).replace('+', ' ')
except:
    pass

main(rmethod, rsrc, query)


#!/usr/bin/python

# story -- A script to read, update, and present storylines to the user.
# 2017 Dowell Lab

# This uses code snippets and functions previously written for the q project (https://github.com/Kyle-Helmick/q),
# developed by Michael Gohde for the project.

import os
import sys
import MySQLdb

# A quick function to convert a python dictionary to 
# a json class. 
def gen_json(dat_dict):
    print "{"
    vals=list(dat_dict)
    for i in range(0, len(vals)):
        if i!=0:
            sys.stdout.write(',\n')
        sys.stdout.write('    "%s": "%s"' % (vals[i], str(dat_dict[vals[i]])))
    print ""
    print "}"
    
def termquery(query):
    while len(query.fetch_row())!=0:
        pass
    
# Generates and prints out an HTTP header for server output.
def printheader():
    print("Content-Type: application/json;charset=utf-8")
    print('')
    
def printerror(errortext):
    print(errortext)
    print('')

dbusername='nudgeweb'
dbpassword='radpassword'

def create_user(username, password):
    db=MySQLdb.connect("localhost", dbusername, dbpassword, "nudgeonline")

    try:
        db.query("INSERT INTO users (username, password, lastlogin) VALUES (%s, PASSWORD('%s'), NOW())" % (username, password))
        db.commit()
        
        db.query("SELECT * FROM users WHERE username='%s'" % (username))
        query=db.use_result()
        
        r=query.fetch_row()[0]
        userid=r[0]
        
        printheader()
        gen_json({'userid':userid})
    except:
        printerror('Status:400')
        print('It appears that the requested username already exists on the system.')
    
    db.close()


def delete_user(username, password):
    db=MySQLdb.connect("localhost", dbusername, dbpassword, "nudgeonline")
    # Start by invalidating all sessions owned by that user:
    db.query("SELECT userid FROM users WHERE username='%s' AND password=PASSWORD('%s')" %  (username, password))
    query=db.use_result()
    
    try:
        r=query.fetch_row()[0]
        
        userid=str(r[0])
        
        db.query("DELETE FROM sessions WHERE userid=%s" % userid)
        db.commit()
        
        #Since we've already checked the given username and password:
        db.query("DELETE FROM users WHERE userid=%s" % userid)
        db.commit()
        
        printheader()
        gen_json({'userid':userid})
    except:
        printerror('Status:400')
        print('Could not delete user account due to invalid credentials')
    db.close()
    

def authenticate_user(sessionid, storyline, db):
    db.query("SELECT userid, groupid FROM sessions WHERE sessionid=%s" % sessionid)
    query=db.use_result()
    
    w=query.fetch_row()
    if len(w)==0:
        return False
    
    userid=w[0][0]
    groupid=w[0][1]
    
    db.query("SELECT storyid FROM stories WHERE authorid=%s OR groupid=%s" % (userid, groupid))
    query=db.use_result()
    
    w=query.fetch_row()
    if len(w)==0:
        return False
    
    return w[0][0]==storyline


def get_story_id(sessionid, storyline, db):
    db.query("SELECT storyid FROM stories WHERE name='%s'" % storyline)
    query=db.use_result()
    
    w=query.fetch_row()
    if len(w)==0:
        return -1
    else:
        return w[0][0]

    
def get_stories():
    db=MySQLdb.connect("localhost", dbusername, dbpassword, "nudgeonline")
    
    db.query("SELECT name FROM stories")
    query=db.use_result()
    
    try:
        storynames=[]
        # TODO: Fix this godawful loop setup
        while True:
            w=query.fetch_row()
            if len(w)==0:
                break
            r=w[0] #query.fetch_row()[0]
            if r is None:
                break
            elif len(r)==0:
                break
            
            storynames.append(r[0])
        
        printheader()
        if len(storynames)==0:
            print('{"storylist":[]}')
        
        else:
            print('{"storylist":[')
            
            print('\t{"storyname":"%s"}\n' % storynames[0])
            
            for s in storynames[1:]:
                print('\t,{"storyname":"%s"}\n' % s)
                
            print(']}')
    except:
        printerror('Status:500')
        print('Could not read available story list.')

def get_story_nodes(sessionid, storyline):
    db=MySQLdb.connect("localhost", dbusername, dbpassword, "nudgeonline")

    if not authenticate_user(sessionid, storyline, db):
        generror('Status:403')
        print('Session has insufficient permissions for requested storyline.')
        return
    
    # Get the story id:
    storyid=get_story_id(sessionid, storylinem, db)
    
    # Now get the nodes:
    try:
        storynodes=[]
        
        # Once again, it would be useful to have a better loop setup:
        while True:
            pass
    except:
        pass


def get_story_node_contents(sessionid, storyline, node):
    pass

def get_story_node_element(storyline, node, element):
    pass

def create_story(storyname):
    pass

def create_node(storyname, nodename, nodecontents):
    pass

def create_node_response(storyname, nodename, destname, destcontents):
    pass

# Dispatcher code:
def main(reqmethod, rsrc):
    sys.stderr=sys.stdout
    # Start dispatching stuff:
    if rsrc is not None:
        reqchunks=rsrc.split('/')[1:]
        
        if reqmethod=="GET":
            if len(reqchunks)==1:
                # TODO: Consider adding some form of authentication by session ID.
                get_stories()
        
            elif len(reqchunks)==2:
                get_story_nodes(reqchunks[0], reqchunks[1])
                
            elif len(reqchunks==3):
                get_story_node_contents(reqchunks[0], reqchunks[1], reqchunks[2])
                
            elif len(reqchunks==4):
                get_story_node_element(reqchunks[0], reqchunks[1], reqchunks[2], reqchunks[3])
        
        elif reqmethod=="PUT":
            pass

    else:
        printerror("Status:400")

rmethod="GET"
rsrc=None

try:
    rmethod=os.environ['REQUEST_METHOD']
    rsrc=os.environ['PATH_INFO']
except:
    pass

main(rmethod, rsrc)
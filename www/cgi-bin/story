#!/usr/bin/python

# story -- A script to read, update, and present storylines to the user.
# 2017 Dowell Lab

# This uses code snippets and functions previously written for the q project (https://github.com/Kyle-Helmick/q),
# developed by Michael Gohde for the project.

import os
import sys
import MySQLdb

# A quick function to convert a python dictionary to 
# a json class. 
def gen_json(dat_dict):
    print "{"
    vals=list(dat_dict)
    for i in range(0, len(vals)):
        if i!=0:
            sys.stdout.write(',\n')
        sys.stdout.write('    "%s": "%s"' % (vals[i], str(dat_dict[vals[i]])))
    print ""
    print "}"
    
def termquery(query):
    while len(query.fetch_row())!=0:
        pass
    
# Generates and prints out an HTTP header for server output.
def printheader():
    print("Content-Type: application/json;charset=utf-8")
    print('')
    
def printerror(errortext):
    print(errortext)
    print('')

dbusername='nudgeweb'
dbpassword='radpassword'
    

def authenticate_user(sessionid, storyline, db):
    db.query("SELECT userid, groupid FROM sessions WHERE sessionid=%s" % sessionid)
    query=db.use_result()
    
    w=query.fetch_row()
    if len(w)==0:
        print "w=0"
        return False
    
    userid=w[0][0]
    groupid=w[0][1]
    
    w=query.fetch_row()
    db.query("SELECT name FROM stories WHERE authorid=%s OR groupid=%s" % (userid, groupid))
    query=db.use_result()
    
    resultfound=False
    w=query.fetch_row()
    while len(w)!=0:
        if w[0][0]==storyline:
            resultfound=True
        
        w=query.fetch_row()
        
    return resultfound;


def get_story_id(sessionid, storyline, db):
    db.query("SELECT storyid FROM stories WHERE name='%s'" % storyline)
    query=db.use_result()
    
    w=query.fetch_row()
    if len(w)==0:
        return -1
    else:
        return w[0][0]

    
def get_stories():
    db=MySQLdb.connect("localhost", dbusername, dbpassword, "nudgeonline")
    
    db.query("SELECT name FROM stories")
    query=db.use_result()
    
    try:
        storynames=[]
        # TODO: Fix this godawful loop setup
        while True:
            w=query.fetch_row()
            if len(w)==0:
                break
            r=w[0] #query.fetch_row()[0]
            if r is None:
                break
            elif len(r)==0:
                break
            
            storynames.append(r[0])
        
        printheader()
        if len(storynames)==0:
            print('{"storylist":[]}')
        
        else:
            print('{"storylist":[')
            
            print('\t{"storyname":"%s"}\n' % storynames[0])
            
            for s in storynames[1:]:
                print('\t,{"storyname":"%s"}\n' % s)
                
            print(']}')
    except:
        printerror('Status:500')
        print('Could not read available story list.')
    
    db.close()


def get_story_nodes(sessionid, storyline):
    db=MySQLdb.connect("localhost", dbusername, dbpassword, "nudgeonline")

    if not authenticate_user(sessionid, storyline, db):
        printerror('Status:403')
        print('Session has insufficient permissions for requested storyline.')
        return
    
    # Get the story id:
    storyid=get_story_id(sessionid, storyline, db)
    
    # Now get the nodes:
    try:
        storynodes=[]
        db.query("SELECT name, nodeid FROM nodes WHERE storyid=%s" % storyid)
        query=db.use_result()
        
        # Once again, it would be useful to have a better loop setup:
        while True:
            w=query.fetch_row()
            
            # Stop the loop 
            if w is None:
                break
            
            if len(w)==0:
                break
            
            r=w[0]
            storynodes.append([r[0], r[1]])
        
        printheader()
        
        if len(storynodes)==0:
            print("{}")
        
        else:
            print('{"contents": [')
            print('{"nodename":"%s", "nodeid":"%s"}' % (storynodes[0][0], str(storynodes[0][1])))
            for elem in storynodes[1:]:
                print(',{"nodename":"%s", "nodeid":"%s"}' % (elem[0], str(elem[1])))
            
            print("]}")
    except:
        printerror('Status:come up with a compelling status code.')
        print("Unable to service request due to a logic or database configuration fault.")
    
    db.close()


def get_story_node_contents(sessionid, storyline, node):
    db=MySQLdb.connect("localhost", dbusername, dbpassword, "nudgeonline")

    if not authenticate_user(sessionid, storyline, db):
        printerror('Status:403')
        print('Session has insufficient permissions for requested storyline.')
        return
    
    # Get the story id:
    storyid=get_story_id(sessionid, storyline, db)
    
    # Now get the specified node's contents:
    #try:
    nodecontents={}
    db.query("SELECT nodeid, name, content FROM nodes WHERE storyid=%s AND name='%s'" % (str(storyid), node))
    query=db.use_result()
    
    # There _should_ only be one element with this specific set of attributes.
    # TODO: Add code to check for duplicate nodes and throw errors, etc as necessary.
    w=query.fetch_row()
    
    # Note: if an exception is raised, 
    nodecontents={'nodeid':w[0][0], 'nodename':w[0][1], 'content':w[0][2]}
    
    query.fetch_row()
    
    # Now that we have all of the appropriate node contents, 
    # attempt to fetch all responses:
    resplist=[]
    db.query("SELECT respid, content FROM responses WHERE nodeid=%s" % str(nodecontents['nodeid']))
    query=db.use_result()
    
    w=query.fetch_row()
    while len(w)!=0:
        resplist.append([w[0][0], w[0][1], []])
        w=query.fetch_row()
    
    # All responses should be secured, to it's now necessary to 
    # associate each response with a specific destination.
    for r in resplist:
        db.query("SELECT dest, weight, rewardid FROM destinations WHERE respid=%d" % r[0])
        query=db.use_result()
        
        w=query.fetch_row()
        while len(w)!=0:
            tmparr=[w[0][0], w[0][1], w[0][2]]
            r[2].append(tmparr)
            w=query.fetch_row()
            
    # Start printing the output:
    printheader()
    print('{"nodeid": %d, "nodename":"%s", "text":"%s", "destinations":[' % (nodecontents['nodeid'], nodecontents['nodename'], nodecontents['content']))
    
    # Make some attempt to print out the contents of the destinations vector:
    for r in resplist:
        if r is not resplist[0]:
            print(',')
        print('{"respid":%d, "content":"%s", "destinations":[' % (r[0], r[1]))
        for d in r[2]:
            if d is not r[2][0]:
                print(',')
            print('{"dest":"%s", "weight":%s, "rewardid":%s}' % (d[0], d[1], d[2]))
            
        print(']}')
    
    print(']}')
            
    #except:
    #    printerror('Status:compelling status code.')
    #    print("Unable to service request due to a logic or database configuration fault.")
    
    db.close()


def get_story_node_element(storyline, node, element):
    pass

def create_story(storyname):
    pass

def create_node(storyname, nodename, nodecontents):
    pass

def create_node_response(storyname, nodename, destname, destcontents):
    pass

# Dispatcher code:
def main(reqmethod, rsrc):
    sys.stderr=sys.stdout
    # Start dispatching stuff:
    if rsrc is not None:
        reqchunks=rsrc.split('/')[1:]
        
        if reqmethod=="GET":
            if len(reqchunks)==1:
                # TODO: Consider adding some form of authentication by session ID.
                get_stories()
        
            elif len(reqchunks)==2:
                get_story_nodes(reqchunks[0], reqchunks[1])
                
            elif len(reqchunks)==3:
                get_story_node_contents(reqchunks[0], reqchunks[1], reqchunks[2])
                
            elif len(reqchunks)==4:
                get_story_node_element(reqchunks[0], reqchunks[1], reqchunks[2], reqchunks[3])
        
        elif reqmethod=="PUT":
            pass

    else:
        printerror("Status:400")

rmethod="GET"
rsrc=None

try:
    rmethod=os.environ['REQUEST_METHOD']
    rsrc=os.environ['PATH_INFO']
except:
    pass

main(rmethod, rsrc)